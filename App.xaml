<Application x:Class="TrashWizard.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:points="clr-namespace:LiveCharts.Wpf.Points;assembly=LiveCharts.Wpf"
             StartupUri="Windows\MainWindow.xaml">
  <Application.Resources>
    <Style TargetType="Separator" x:Key="ToolbarSeparator">
      <Setter Property="Background" Value="Teal" />
      <Setter Property="Width" Value="1" />
    </Style>

    <Style TargetType="Image" x:Key="ToolbarImage">
      <Setter Property="Width" Value="24" />
      <Setter Property="Height" Value="24" />

      <!--
        From http://spiderinnet1.typepad.com/blog/2016/07/wpf-tip-101-50-grey-out-image-button.html
      -->
      <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Opacity" Value="0.5" />
        </Trigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ToolbarButton">
      <Setter Property="Cursor" Value="Hand" />
      <Setter Property="Width" Value="48" />
      <Setter Property="Height" Value="48" />
      <Setter Property="HorizontalAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="ToolBar.OverflowMode" Value="AsNeeded" />
    </Style>

    <Style TargetType="{x:Type Hyperlink}">
      <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="TextBlock.TextDecorations" Value="Underline" />
        </Trigger>
      </Style.Triggers>
      <Setter Property="Foreground" Value="#002C54" />
      <Setter Property="FontWeight" Value="Bold" />
      <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
    </Style>

    <LinearGradientBrush x:Key="GrayBlueGradientBrush" StartPoint="0,0" EndPoint="1,1">
      <GradientStop Color="#002C54" Offset="0" />
      <GradientStop Color="#ABD7FF" Offset="0.5" />
      <GradientStop Color="#002C54" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GrayBlueGradientBrushHover" StartPoint="0,0" EndPoint="1,1">
      <GradientStop Color="#ABD7FF" Offset="0" />
      <GradientStop Color="#002C54" Offset="0.5" />
      <GradientStop Color="#ABD7FF" Offset="1" />
    </LinearGradientBrush>

    <Style TargetType="{x:Type Button}">
      <Setter Property="Cursor" Value="Hand" />
      <Setter Property="Width" Value="75" />
      <Setter Property="Height" Value="25" />
      <Setter Property="Foreground" Value="#002C54" />
      <Setter Property="FontWeight" Value="Bold" />
      <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />

      <Setter Property="Margin" Value="10,10,10,10" />

      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border BorderThickness="0"
                    Background="{TemplateBinding Background}"
                    CornerRadius="4">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>

      <!--
      From https://stackoverflow.com/questions/10768231/creating-a-transition-between-two-wpf-gradients-on-a-button
      There is no LinearGradientAnimation
      -->
      <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrushHover}" />
          <Setter Property="Foreground" Value="White" />

          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="Button">
                <Border BorderThickness="1"
                        BorderBrush="Black"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4">
                  <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                </Border>
              </ControlTemplate>
            </Setter.Value>
          </Setter>

        </Trigger>

      </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}">
      <Setter Property="Cursor" Value="Hand" />
      <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style TargetType="{x:Type CheckBox}">
      <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeader}">
      <Setter Property="FontWeight" Value="Bold" />
      <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
      <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style TargetType="{x:Type points:PieSlice}">
      <Setter Property="Cursor" Value="Hand" />
    </Style>

  </Application.Resources>
</Application>